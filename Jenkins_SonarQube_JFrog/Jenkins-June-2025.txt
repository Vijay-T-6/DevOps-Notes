Jenkins
----------------------------------------------------------------------------------------------------------------------------------------------------
Class -01 14-07-2025
----------------------------------------------------------------------------------------------------------------------------------------------------
Jenkins is an opensource automation tool written in java, that automates some of the software development lifecycle tasks like build, deploy and test

Installation:
1. Create an ubuntu server
2. https://www.jenkins.io/download/

sudo apt update -y 
sudo apt install fontconfig openjdk-21-jre

sudo wget -O /etc/apt/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
echo "deb [signed-by=/etc/apt/keyrings/jenkins-keyring.asc]" \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update -y
sudo apt-get install jenkins -y

------
For Lower Version

sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc]" \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update -y
sudo apt install fontconfig openjdk-17-jre -y
sudo apt-get install jenkins=2.462.2
sudo apt-get install jenkins -y


sudo systemctl start jenkins
sudo systemctl stop jenkins
sudo systemctl status jenkins
sudo systemctl restart jenkins
sudo systemctl status jenkins
-------------------------------------------------------------------------
Lower Version

sudo wget -O /etc/apt/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
echo "deb [signed-by=/etc/apt/keyrings/jenkins-keyring.asc]" \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update -y
sudo apt-get install jenkins=2.462.2
-------------------------------------------------------------------------
Assignment:
1. Learn the difference between monolithic and microservices
2. Install the Jenkins on ec2-server
3. list all the cicd tools available in the market
----------------------------------------------------------------------------------------------------------------------------------------------------
Class -02 16-07-2025
----------------------------------------------------------------------------------------------------------------------------------------------------
To install the java 17
sudo apt-get update -y, 
sudo apt-get install -y openjdk-17-jdk

Command to Switch the Java version
sudo update-alternatives --config java ----> To switch between java version if we have multiple java version
-----------------------------------------------------------------------------------------------------------------------------------------------------
Default Path of Jenkins ------------------> /var/lib/jenkins
https://github.com/tranju664/example-java
/var/lib/jenkins/secrets/initialAdminPassword   ---> Location for initial Password
mvn clean install  ---> To build the maven project
mvn clean package  ---> To build the maven project
---------------------------------------------------------------------------------
Jenkins Triggers:

1. Build Periodically: If we want to schedule a build periodically we use this option and we define a 
crontab in the jenkins job

2. PollSCM: PollSCM will only build the project if new commits were made to the source code(Github), we must
schedule the POLL SCM by using crontab

3. Github Webhook Trigger: Webhook Trigger will trigger the builds as soon as any changes are made
to the source code (GitHub)

Payload URL: jenkinsurl:8080/github-webhook/
example: http://3.110.124.162:8080/github-webhook/
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
Plugins:

Plugins help in increasing the capabilities of Jenkins.

1. Monitoring --> To Monitor Jenkins Server
2. Docker --> To integrate Docker with Jenkins
3. K8S --> To integrate K8S with Jenkins
4. Blueocean --> To visualize Jenkin Jobs
5. Periodic backup --> To take Periodically backup of Jenkins serve
6. Parameterized Plugins --> To pass inputs to Jenkins jobs
7. Maven Plugin --> To work on Maven build tool in Jenkins
8. Artifactory --> To integrate Jfrog with jenkins
8. CVS - Source Code Management Plugins
9. Pipeline: Stage View ----> To see the stages in the job
10. Role-based Authorization Strategy ----> To limit the access to the user on the Project level
----------------------------------------------------------------------------------------------------------------------------
Assignment:
1. Perform build periodically, pollscm and webhook
2. install all the plugins on the jenkins server
3. Change the default path of Jenkins to some other path
4. Learn the difference between mvn clean install vs clean package
5. How to do the debug of job/pipeline in jenkins?
6. How do we debug, if Jenkins is not accessible from the UI and how do we fix it and How do we ensure minimum downtime for users(rescue instance)
--------------------------------------------------------------------------------------------------------------------------------------------------
Class -03 17-07-2025
----------------------------------------------------------------------------------------------------------------------------------------------------
Master-Slave in Jenkins

Sometimes you might need several different environments to test your builds. 
This cannot be done by a single Jenkins server. In such scenarios where we need a different 
machine with a different environment that takes the specific job from the master to build.

No. Of Executors = This number represents at a single point in time how many different jobs can run
					in parallel

Agent Server requirements:
1. Java to be installed ( master and slave should have the same java version)
2. Proper SSh connection between master and slave
3. instal necessary softwares like maven, docker etc. as per the requirement

Advantages:
1. Distribution of load
2. single point of failure will not be there
----------------------------------------------------------------------------------------------------------------------------
Matrix based Security:

Matrix Authorization allows configuring the permissions for each user individually

Project based Security:

Project-based Matrix authorization strategy is an extension to “Matrix-based security”, 
where you can setup permissions to individual projects. This means that you can allow a specific user
to access only certain projects.

Role-based Authorization Strategy is a Jenkins plugin that allows administrators to assign specific permissions to users or groups based on defined roles. These roles can be scoped to:
Global level (e.g., full admin access)
Project or Job level (e.g., view or build access to specific pipelines)
Folder level (e.g., permissions to manage jobs within a specific folder)

Project level Access ---> Pattern should be like ( ^Folder-A(/.*)?$ ) ---> replace Folder-A with your Folder name
| Field       | Value              |
| ----------- | ------------------ |
| Role to add | Folder_name        |
| Pattern     | ^Folder-A(/.*)?$  |

Job level Access -----> Pattern should be like ( ^Job1$ ) ------> replace Job1 with  your Job name
| Field       | Value              |
| ----------- | ------------------ |
| Role to add | Job_name           |
| Pattern     | ^Job1$             |
----------------------------------------------------------------------------------------------------------------------------
Tomcat installation
----------------------------------------------------------------------------------------------------------------------------
Step1: wget <tomcat_url>   #dowload the latest tomcat version

Step2: cd bin

step3: sh startup.sh

step4: 
 find -type f -name context.xml
./webapps/manager/META-INF/context.xml
./webapps/host-manager/META-INF/context.xml

<!-- <Valve className="org.apache.catalina.valves.RemoteAddrValve"
        allow="127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1" /> -->
the above 2 line to be commented out in all the above files	
		
step 5:		
cd /conf
tomcat-user.xml
# below four lines to be added in the tomcat-users.xml
 <role rolename="manager-gui"/>
 <user username="admin" password="admin" roles="manager-gui"/>

 <role rolename="admin-gui"/>
 <user username="admin" password="admin" roles="manager-gui,admin-gui"/>
----------------------------------------------------------------------------------------------------------------------------
Repo URL -----> https://github.com/tranju664/java-war
----------------------------------------------------------------------------------------------------------------------------			
Assignment: 
1. Create a Master-Slave and deploy a .war application to your tomcat slave
2. Setup Matrix Based Security
3. Setup Project Based Security
4. Setup Role-Based Authorization strategy and limit the access on the Folder level
5. Change the default port of Jenkins (8080) to 8070
6. If you loose the access to Jenkins as you are admin, how do revert it back?
----------------------------------------------------------------------------------------------------------------------------------------------------
Class -04 18-07-2025
----------------------------------------------------------------------------------------------------------------------------------------------------
CI/CD set up:

Once dev team pushes code to github, jenkins pipeline job will get triggered, 
it has 5 stages. git checkout, Scanning, build, deploy and test stages.

In git checkout stage, it will pull the source code from the github, once this stage is success, Scanning will get triggered

In Scanning Stage, It will scan the Source Code, once this stage is success, build stage will get triggered

in build stage, it compiles code  and generates binary. 
once build stage is success, push stage will get triggered automatically,
 
in push stage, the artifacts generated will be deployed onto to the antifactory, once
the push stage is complete, deploy stage will get triggered

in deploy stage, war/jar file will get deployed to the environment 
-----------------------------------------------------------------
Continuous Integration: is a development practice that requires developers to integrate code 
into a shared repository several times a day. Each check-in is then verified by an automated build, 
allowing teams to detect problems early. By integrating regularly, you can detect errors quickly, 
and locate them more easily.

Continuous Delivery: Continuous delivery picks up where continuous integration ends. 
CD automates the delivery of applications to selected infrastructure environments. 
Most teams work with multiple environments other than the production, 
such as development and testing environments, 
and CD ensures there is an automated way to push code changes to them.

Continuous Deployment: Continuous deployment goes one step further than continuous delivery. 
With this practice, every change that passes all stages of your production pipeline is released 
to your customers. There's no human intervention, and only a failed test will prevent 
a new change to be deployed to production.
-----------------------------------------------------------------
Pipeline:
In other words, a Jenkins Pipeline is a collection of events that brings the 
software from version control into the hands of the end users by using automation tools. 
It is used to incorporate continuous delivery in the software development workflow.
----------------------------------------------------------------------------------
pipeline {
    agent any

    stages {
        stage('Hello') {
            steps {
                echo 'Hello World'
            }
        }
    }
}
----------------------------------------------------
CI/CD Pipeline
Agent any ----> it will use any available agent

pipeline {
   agent any
   
   stages {
       stage ('Git Checkout stage'){
	     steps {
		   echo "This is the Git checkout stage"
		   sh 'sleep 10'
		   }
		}
	   stage ('Scanning stage '){
	     steps {
		   echo "This is Scanning stage"
		   sh 'sleep 10'
		   }
		}
		stage ('Build stage'){
	     steps {
		   echo "This is Build stage"
		   sh 'sleep 10'
		   }
		}
		stage ('Push to Artifactory'){
	     steps {
		   echo "Push to Artifactory"
		   sh 'sleep 10'
		   }
		}
		stage ('Deploy stage'){
	     steps {
		   echo "This is Deploy stage"
		   sh 'sleep 10'
		   }
		}
	}
}
		
-----------------------------------------------------------------------
Pipeline with Specific agent 

pipeline {
   agent none
   
   stages {
       stage ('Git Checkout stage'){
	     agent {label 'master'}
	     steps {
		   echo "This is the Git checkout stage"
		   sh 'sleep 10'
		   }
		}
		stage ('Deploy stage'){
		 agent {label 'Tomcat'}
	     steps {
		   echo "This is Deploy stage"
		   sh 'sleep 10'
		   }
		}
	}
}
------------------------------------------------------------------------
Example:

pipeline {
   	agent {label 'master'}
   
   stages {
       stage ('Git Checkout stage'){
	     steps {
		   echo "This is the Git checkout stage"
		   sh 'sleep 10'
		   }
		}
		stage ('Deploy stage'){
		 agent {label 'Tomcat'}
	     steps {
		   echo "This is Deploy stage"
		   sh 'sleep 10'
		   }
		}
	}
}
-----------------------------------------------------------------------
Pipeline with Email Notification 

pipeline {
   agent {label 'Tomcat'}
   
   stages {
       stage ('Git Checkout stage'){
	     steps {
		   git branch: 'main', url: 'https://github.com/tranju664/java-war.git'
		   }
		}
		stage ('Deploy stage'){
	     steps {
		   sh 'mvn clean install'
		   }
		}
	}
	post {
	  failure {
	    mail (
		   to: 'tanuradha546@gmail.com',
		   subject: "build got failed",
		   body: "The build got failed"
		   )
	}
  }	
}
------------------------------------------------------------------------------------------------------------------------------------------
Email Notification set up
Generate the App Pasword
https://myaccount.google.com/apppasswords

Go to Manage Jenkins > Configure System.

Under E-mail Notification, configure the SMTP settings:

SMTP Server Address: (e.g., smtp.gmail.com or smtp.office365.com)

SMTP Port: 587 (for TLS/STARTTLS) or 465 (for SSL)

Use SSL/TLS: Yes (for port 587, use TLS/STARTTLS)

Username: The user’s full email address

Password: The app password generated by the user
---------------------------------------------------------------------------------------------------------------
post {
        failure {
            mail (
                to: 'xyz.com',
                subject: "Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: "The build ${env.JOB_NAME} #${env.BUILD_NUMBER} failed. Please check Jenkins for more details.\n\nBuild URL: ${env.BUILD_URL}"
            )
        }
    }
-------------------------------------------------------------------------------------------------------------------------
Assignment:
Learn about the ENV variables in jenkins
---------------------------------------------------------------------------------------------------------------------------------------------------
Class -05 19-07-2025
----------------------------------------------------------------------------------------------------------------------------------------------------
Parallel stages in the pipeline

pipeline {
   agent {label 'master'}
   stages {
      stage('git checkout stage') {
	    steps {
		  echo "this is the checkout stage "
		  sh 'sleep 10'
		  }
		}
   	  stage('testing') {
	  parallel{
	    stage('sonar') {
		  steps {
		  echo "this is the soanr stage"
		  sh 'sleep 10'
		  }
		 }
		stage('junit') {
		  steps {
		  echo "this is the junit stage"
		  sh 'sleep 10'
		  }
		 }
        }		 
		}    
	  stage('build stage') {
	    steps {
		  echo "this is the build stage "
		  sh 'sleep 10'
		  }
		}
      stage('deploy stage') {
	    steps {
		  echo "this is the deploy stage "
		  sh 'sleep 10'
		  }
		}
		}
}
--------------------------------------------------------------------------------------
Parallel steps
pipeline {
   agent {label 'master'}
   triggers {
     pollSCM '* * * * *'
	 }
   stages {
      stage('git checkout stage') {
	    steps {
		  echo "this is the checkout stage "
		  sh 'sleep 10'
		  }
		}    
	  stage('build stage') {
	    steps {
		parallel ( 
		  step1: {
		  echo "this is the parallel step 1 "
		  sh 'sleep 5'
		  },
		  step2: {
		  echo "this is the parallel step 2 "
		  sh 'sleep 5'
		  },
		  step3: {
		  echo "this is the parallel step 3 "
		  sh 'sleep 5'
		  }
		  )
		}
		}
      stage('deploy stage') {
	    steps {
		  echo "this is the deploy stage "
		  sh 'sleep 10'
		  }
		}
		}
}
-----------------------------------------------------------------------------------------------------
Jenkins File:
Jenkins Pipeline can be defined by a text file called JenkinsFile. 
You can implement pipeline as code using JenkinsFile, 
and this can be defined by using a groovy DSL (Domain Specific Language). 
With the help of JenkinsFile, you can write the steps required for running a Jenkins Pipeline.

Default Name of file: Jenkinsfile
-----------------------------------------------------------------
Pipeline Syntax:

Two types of syntax are used for defining your JenkinsFile.

DECLARATIVE PIPELINE: 					
1. New way of writing with simple groovy declaratives
2. Code is written in a file and is checked into git (SCM) and then added to jenkins job
3. All code is defined inside pipeline block

SCRIPTED PIPELINE:
1. Old way / Traditional way of pipeline code with scripted groovy syntax
2. Code is written directly in jenkins pipeline or in UI
3. Defined within a node block
--------------------------------------------------------------
SonarQube
username: admin
password: admin

SonarQube Scanner for Jenkins ---> plugin for sonarscanner
--------------------------------------------------------------------
--------------------------------------------------------------------
Jfrog Artifactory Setup:
username: admin
password: password

Artifactory plugin ----> plugin for JFROG
----------------------------------------------------------------------------
Repo URl:
https://github.com/tranju664  ---> check for all the repos in this Github URL
-----------------------------------------------------------------------------
Assignment:
Learn the difference between snapshot and the release
Perform the Jenkins Migration/upgradation of jenkins
Learn about the Jacaco plugin in sonar
what are the checks we do in sonar?
learn about MultiBranch Pipelien
-----------------------------------------------------------------------------------------------------
